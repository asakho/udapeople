version: 2.1

orbs:
    slack: circleci/slack@4.2.1
    aws-cli: circleci/aws-cli@1.3.2

commands:
  rollback-env:
    description: Destroy backend and frontend cloudformation stacks depend on workflow ID.
    steps:
      - run:
          name: Delete S3 content
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            exit 0

      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}
            exit 0  

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1          

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             cd backend
             npm i
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1          

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm build
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1
      - slack/notify:
          event: fail
          template: basic_fail_1                     
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm build
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1  

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: pass
          template: success_tagged_deploy_1               

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
            npm install
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1
          
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli 
    steps:
      - checkout 

      - run:
          name: Install prerequsites
          command: |
            yum -y install tar gzip jq git 

      - add_ssh_keys:
            fingerprints:
                - "ca:54:ff:52:8b:cd:46:f0:ee:f7:83:f7:30:62:7e:3a"

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "backend-stack-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "front-endd-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "Add backend ip to ansible inventory"
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> .circleci/ansible/inventory.txt    
            cat .circleci/ansible/inventory.txt    

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - rollback-env     

  configure-infrastructure:
    docker:
      - image: williamyeh/ansible:ubuntu18.04
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "ca:54:ff:52:8b:cd:46:f0:ee:f7:83:f7:30:62:7e:3a"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apt -y update
            apt -y install git curl

      - run:
          name: add host to ssh_config
          command: |
            echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml -v
      - rollback-env

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
              branches:
                  only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]